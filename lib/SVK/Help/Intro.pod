=head1 NAME

SVK::Help::Intro - Introduction to svk

=head1 DESCRIPTION

svk is an open source distributed version control system which is
designed to interoperate with Subversion.  Like other version control
systems, it keeps track of each change you make to a project and allows
you to maintain multiple parallel tracks of development.  svk also has
a number of powerful features which are rarely found in other version
control systems.

svk has been designed from the ground up to support development
models that are simple and intuitive for software developers.  It has
advanced smart branching and merging semantics that make it easy to
maintain multiple parallel lines of development and painless to merge
changes across branches. svk's built in patch manager makes it easy
for non-committers to share changes among themselves and with project
maintainers

svk provides powerful support for I<distributed development>.  Every svk
client is capable of fully mirroring remote Subversion repositories so
that you have full access to a project's history at any time, even when
they are off the network or on the wrong side of a firewall.  You can
branch a remote project at any point in that project's history, whether
or not you have write access to that project's repository.  Later, you
can integrate changes from the project's master server (usually with a
single command) or push your branch up to another Subversion repository.


=head1 GETTING STARTED

svk has a rich command line interface that can be somewhat daunting
at first. the following few commands are all you'll need for day to
day operation. 

=over

=item svk mirror

First, you'll need to Using svk, you can I<mirror> a remote repository.

=item svk sync

When you've set up a new mirror or want to get some work done without
a network connection, I<sync> your local repository with upstream
repositories.

=item svk copy

After that, it's easy to I<copy> remote branches to create local
branches. (svk branches are simply directories, just like Subversion
branches.)

=item svk checkout

When you want to get some work done, you can I<checkout> a working copy
to make local changes.

=item svk add, svk delete and svk move

As you work on the files in your working copy, feel free to I<add>
new files, I<delete> existing files and I<move> files around.

=item svk commit

When you're done, just I<commit> your changes to your local repository,
whether or not you have network.  If you I<commit> to a mirrored path,
rather than a local branch, you'll need to be able to access the path's
upstream subversion server, but the commit will be sent to the server
instantly.

=item svk pull

Life doesn't stop when you make a local branch.  From time to time,
I<pull> down changes from the upstream repository.


=item svk push


When you're ready to share your changes with the world, I<push> them to
the upstream repository.

=back

To see a full list of svk's commands, type C<svk help commands>.
For help with a specific command, just type C<svk help I<command>>.

The svk wiki (L<http://svk.elixus.org>) is a great place to find the
latest svk tips, tricks and updates.  If you run into trouble using svk,
the wiki's the right place to start looking for help.

=cut

1;
